features = col$Lang,
color = col$Color)
col <- read_tsv("col.csv")
map.feature(col$Lang,
features = col$Lang,
color = col$Color)
col$gltc <- gltc(col$Lang)
col$gltc <- gltc.lang(col$Lang)
View(col)
lang <- read_tsv("languages.csv")
lang <- lang[unique(lang$language),]
lang$gltc <- gltc.lang(lang$language)
View(lang)
lang <- read_tsv("languages.csv")
lang <- lang[!duplicated(lang$language),]
lang$gltc <- gltc.lang(lang$language)
View(lang)
write.csv(lang, "lang.csv")
knitr::opts_chunk$set(echo = FALSE)
# loading packages
library(tidyverse)
library(DT)
library(lingtypology)
# loading data - mind the date in the csv filename!
words <- read_tsv("words_07022019.csv")
meta <- read_tsv("meta_07022019.csv")
# select relevant parameters from metadata file
meta <- meta %>%
select(`List ID`, Type, Code, Language, Glottocode, Village, District, Lat, Lon)
# merge table with target words and the corresponding metadata
words_meta <- merge(words, meta, by = 'List ID')
# select some variables for the datatable (= database interface)
database <- words_meta %>%
select(`Concept nr.`, Concept, Word, Set, Village, Language, District, `List ID`)
View(words)
color <- words[(words$Concept == 'the colour/color'),]
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
View(color)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
feature = color$Set)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
color <- color[complete.case(color$Set),]
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
color <- color[complete.cases(color$Set),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
color <- database[(database$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
View(database)
knitr::opts_chunk$set(echo = FALSE)
# loading packages
library(tidyverse)
library(DT)
library(lingtypology)
# loading data - mind the date in the csv filename!
words <- read_tsv("words_07022019.csv")
meta <- read_tsv("meta_07022019.csv")
# select relevant parameters from metadata file
meta <- meta %>%
select(`List ID`, Type, Code, Language, Glottocode, Village, District, Lat, Lon)
# merge table with target words and the corresponding metadata
words_meta <- merge(words, meta, by = 'List ID')
# select some variables for the datatable (= database interface)
database <- words_meta %>%
select(`Concept nr.`, Concept, Word, Set, Village, Language, District, `List ID`)
content <- words_meta %>%
group_by(`List ID`, Language, Word) %>%
summarise(Words = n())
languages <- length(unique(content$Language))
target_words <- sum(content$Words)
all <- rbind(target_words, languages)
all
# Create a searchable datatable with filters on top
datatable(database, class = 'cell-border stripe', filter = 'top', options = list(pageLength = 100))
# Remove certain NA's for now
meta <- meta[complete.cases(meta$Lat),]
meta <- meta[complete.cases(meta$Glottocode),]
# Separate dictionaries from speakers
dict <- meta %>%
filter(meta$Type == 'Dictionary')
speakers <- meta %>%
filter(meta$Type == 'Speaker')
# Create a dataframe that shows the number of lists per village
lists <- speakers %>%
group_by(Village, Language, Glottocode, Lat, Lon) %>%
summarise(Lists = n())
# Convert the column with counts to a factor
lists$Lists <- as.factor(lists$Lists)
# Draw a map that shows each village and the number of lists collected
map.feature(lang.gltc(lists$Glottocode),
feature = lists$Lists,
color = "magma",
latitude = lists$Lat,
longitude = lists$Lon,
zoom.control = TRUE,
legend = TRUE,
title = "Lists",
label = lists$Language,
popup = paste(aff.lang(lang.gltc(lists$Glottocode)), # Popup with genetic info on language + name of village
"<br>",
"<br>",
"<b> Village: </b>",
lists$Village),
zoom.level = 7.5) %>% # Put another map on top of it, showing dictionary data
map.feature(lang.gltc(dict$Glottocode),
latitude = dict$Lat,
longitude = dict$Lon,
feature = dict$Language,
label = dict$Language,
popup = paste(aff.lang(lang.gltc(dict$Glottocode)),
"<br>",
"<br>",
"<b>Source:</b>",
"[Insert reference to literature here]"),
legend = FALSE,
color = c("orange"),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
color <- database[(database$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
color <- database[(database$Concept == 'the colour/color'),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
color <- database[(database$Concept == 'the colour/color'),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
View(words_meta)
View(words)
View(words_meta)
View(database)
# loading packages
library(tidyverse)
library(DT)
library(lingtypology)
# loading data - mind the date in the csv filename!
words <- read_tsv("words_07022019.csv")
meta <- read_tsv("meta_07022019.csv")
# select relevant parameters from metadata file
meta <- meta %>%
select(`List ID`, Type, Code, Language, Glottocode, Village, District, Lat, Lon)
# merge table with target words and the corresponding metadata
words_meta <- merge(words, meta, by = 'List ID')
words_meta$Set <- paste(words_meta$`Concept nr.`, "-", words_meta$Stem)
# select some variables for the datatable (= database interface)
database <- words_meta %>%
select(`Concept nr.`, Concept, Word, Set, Village, Language, District, `List ID`)
View(words_meta)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
popup = color$Word)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
popup = color$Word,
zoom.control = T,
zoom.level = 7)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Word),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
library(lingtypology)
glot <- c("west2369", "kumy1244", "russ1263", "arch1244", "bezh1248", "egyp1253", "nort2697",
"nucl1302")
lat <- lat.gltc(glot)
lat <- lat.lang(lang.gltc(glot))
lon <- lon.lang(lang.gltc(glot))
lon <- long.lang(lang.gltc(glot))
coord <- data.frame(cbind(lat, lon))
View(coord)
knitr::opts_chunk$set(echo = FALSE)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Word),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Word),]
color <- color[complete.cases(color$Glottocode),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
knitr::opts_chunk$set(echo = FALSE)
# loading packages
library(tidyverse)
library(DT)
library(lingtypology)
# loading data - mind the date in the csv filename!
words <- read_tsv("words_07022019.csv")
meta <- read_tsv("meta_07022019.csv")
# select relevant parameters from metadata file
meta <- meta %>%
select(`List ID`, Type, Code, Language, Glottocode, Village, District, Lat, Lon)
# merge table with target words and the corresponding metadata
words_meta <- merge(words, meta, by = 'List ID')
words_meta$Set <- paste(words_meta$`Concept nr.`, "-", words_meta$Stem)
# select some variables for the datatable (= database interface)
database <- words_meta %>%
select(`Concept nr.`, Concept, Word, Set, Village, Language, District, `List ID`)
View(color)
knitr::opts_chunk$set(echo = FALSE)
# loading packages
library(tidyverse)
library(DT)
library(lingtypology)
# loading data - mind the date in the csv filename!
words <- read_tsv("words_07022019.csv")
meta <- read_tsv("meta_07022019.csv")
# select relevant parameters from metadata file
meta <- meta %>%
select(`List ID`, Type, Code, Language, Glottocode, Village, District, Lat, Lon)
# merge table with target words and the corresponding metadata
words_meta <- merge(words, meta, by = 'List ID')
words_meta$Set <- paste(words_meta$`Concept nr.`, "-", words_meta$Stem)
# select some variables for the datatable (= database interface)
database <- words_meta %>%
select(`Concept nr.`, Concept, Word, Set, Village, Language, District, `List ID`)
content <- words_meta %>%
group_by(`List ID`, Language, Word) %>%
summarise(Words = n())
languages <- length(unique(content$Language))
target_words <- sum(content$Words)
all <- rbind(target_words, languages)
all
# Remove certain NA's for now
meta <- meta[complete.cases(meta$Glottocode),]
# Separate dictionaries from speakers
dict <- meta %>%
filter(meta$Type == 'Dictionary')
speakers <- meta %>%
filter(meta$Type == 'Speaker')
# Create a dataframe that shows the number of lists per village
lists <- speakers %>%
group_by(Village, Language, Glottocode, Lat, Lon) %>%
summarise(Lists = n())
# Convert the column with counts to a factor
lists$Lists <- as.factor(lists$Lists)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Word),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
View(color)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Word),]
color <- color[complete.cases(color$Glottocode),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
# Draw a map that shows each village and the number of lists collected
map.feature(lang.gltc(lists$Glottocode),
feature = lists$Lists,
color = "magma",
latitude = lists$Lat,
longitude = lists$Lon,
zoom.control = TRUE,
legend = TRUE,
title = "Lists",
width = 7,
label = lists$Language,
popup = paste(aff.lang(lang.gltc(lists$Glottocode)), # Popup with genetic info on language + name of village
"<br>",
"<br>",
"<b> Village: </b>",
lists$Village),
zoom.level = 7.5) %>% # Put another map on top of it, showing dictionary data
map.feature(lang.gltc(dict$Glottocode),
latitude = dict$Lat,
longitude = dict$Lon,
feature = dict$Language,
label = dict$Language,
popup = paste(aff.lang(lang.gltc(dict$Glottocode)),
"<br>",
"<br>",
"<b>Source:</b>",
"[Insert reference to literature here]"),
legend = FALSE,
color = c("orange"),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
color <- words_meta[(words_meta$Concept == 'the bucket'),]
color <- color[complete.cases(color$Word),]
color <- color[complete.cases(color$Glottocode),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
bucket <- words_meta[(words_meta$Concept == 'the bucket'),]
bucket <- bucket[complete.cases(bucket$Word),]
bucket <- bucket[complete.cases(bucket$Glottocode),]
map.feature(lang.gltc(bucket$Glottocode),
latitude = bucket$Lat,
longitude = bucket$Lon,
features = bucket$Set,
zoom.control = T,
zoom.level = 7,
label = bucket$Language,
popup = bucket$Word)
rm(list=ls())
setwd("~/Git/Dagloan_database")
words <- read_tsv("words_07022019.csv")
library(tidyverse)
words <- read_tsv("words_07022019.csv")
words$Set <- paste(words$`Concept nr.`, "-", words$Stem)
a <- unique(words$Set)
db <- read.csv("convert/words_28032019_dummy.tsv", header = TRUE, sep = "\t", na.strings = "NA", row.names = NULL)
head(db)
row.names(db) <- db[,1]
#db_long <- gather(db, Lexeme, Present, the_ant_1:the_year_12, factor_key=TRUE)
db$region <- as.character(db$region)
#db_long <- gather(db, Lexeme, Present, the_ant_1:the_year_12, factor_key=TRUE)
db$Region <- as.character(db$Region)
db <- read.csv("convert/words_28032019_dummy.tsv", header = TRUE, sep = "\t", na.strings = "NA", row.names = NULL)
row.names(db) <- db[,1]
#db_long <- gather(db, Lexeme, Present, the_ant_1:the_year_12, factor_key=TRUE)
db$Region <- as.character(db$Region)
#db_long <- gather(db, Lexeme, Present, the_ant_1:the_year_12, factor_key=TRUE)
db$District <- as.character(db$District)
db <- read.csv("convert/words_28032019_dummy.tsv", header = TRUE, sep = "\t", na.strings = "NA", row.names = NULL)
head(db)
row.names(db) <- db[,1]
#db_long <- gather(db, Lexeme, Present, the_ant_1:the_year_12, factor_key=TRUE)
db$District <- as.character(db$District)
Districts <- db[,c(1:4)]
db <- db[,-c(1:4)]
db <- as.data.frame(t(db))
turkic=as.matrix(db)
turkic[is.na(turkic)] <- 0
turkic=as.data.frame(turkic)
db$Turk_total <- turkic$D_Azerbaijani+turkic$D_Kumyk+turkic$Darvag1+turkic$Darvag2+turkic$Darvag3+turkic$Darvag4+turkic$Darvag5+turkic$Darvag6+turkic$Ilisu1+turkic$Yersi1+turkic$Yersi2+turkic$Yersi3+turkic$Yersi4+turkic$Qax1+turkic$Qax2+turkic$Qax3+turkic$Qax7+turkic$Qax8+turkic$Qax9
#db <- as.data.frame(t(db))
head(db)
all_turkic <-  as.data.frame(t(db[which(db$Turk_total>0 & db$D_Russian != 1 & db$D_Arabic != 1 & db$D_Persian != 1),]))
all_turkic$Speaker <- rownames(all_turkic)
all_turkic <- left_join(Districts, all_turkic, by= c("Speaker"))
library(tidyverse)
library(tidyverse)
library(ggplot2)
all_turkic <- left_join(Districts, all_turkic, by= c("Speaker"))
head(all_turkic)
#all_turkic$District <- as.factor(all_turkic$District)
all_turkic <- all_turkic[all_turkic$District %in% c("Akhvakh", "Botlikh", "Rutul", "Tsunta"),]
all_turkic$District <- factor(all_turkic$District, levels(all_turkic$District) <- c("Akhvakh", "Botlikh", "Rutul", "Tsunta"))
#all_turkic$District <- as.factor(all_turkic$District)
all_turkic <- gather(all_turkic,Lexeme,Present, the_ant_5:the_year_2,factor_key=TRUE)
head(all_turkic)
avar <-  as.data.frame(t(db[which(db$D_Avar>0 & db$D_Russian != 1 & db$D_Arabic != 1 & db$D_Persian != 1 & db$Turk_total == 0),]))
avar$Speaker <- rownames(avar)
avar <- left_join(Districts, avar, by= c("Speaker"))
#avar$District <- as.factor(avar$District)
avar <- avar[avar$District %in% c("Akhvakh", "Botlikh", "Rutul", "Tsunta"),]
avar$District <- factor(avar$District, levels(avar$District) <- c("Akhvakh", "Botlikh", "Rutul", "Tsunta"))
#avar$District <- as.factor(avar$District)
avar <- gather(avar,Lexeme,Present, the_ant_20:the_year_11,factor_key=TRUE)
head(avar)
georgian <-  as.data.frame(t(db[which(db$D_Georgian>0 & db$D_Russian != 1 & db$D_Arabic != 1 & db$D_Persian != 1 & db$Turk_total == 0),]))
georgian$Speaker <- rownames(georgian)
georgian <- left_join(Districts, georgian, by= c("Speaker"))
#georgian$District <- as.factor(georgian$District)
georgian <- georgian[georgian$District %in% c("Akhvakh", "Botlikh", "Rutul", "Tsunta"),]
georgian$District <- factor(georgian$District, levels(georgian$District) <- c("Akhvakh", "Botlikh", "Rutul", "Tsunta"))
#georgian$District <- as.factor(georgian$District)
georgian <- gather(georgian,Lexeme,Present, the_ant_1:the_year_5,factor_key=TRUE)
head(georgian)
chechen <-  as.data.frame(t(db[which(db$D_Chechen>0 & db$D_Russian != 1 & db$D_Arabic != 1 & db$D_Persian != 1 & db$Turk_total == 0),]))
chechen$Speaker <- rownames(chechen)
chechen <- left_join(Districts, chechen, by= c("Speaker"))
#chechen$District <- as.factor(chechen$District)
chechen <- chechen[chechen$District %in% c("Akhvakh", "Botlikh", "Rutul", "Tsunta"),]
chechen$District <- factor(chechen$District, levels(chechen$District) <- c("Akhvakh", "Botlikh", "Rutul", "Tsunta"))
#chechen$District <- as.factor(chechen$District)
chechen <- gather(chechen,Lexeme,Present, the_ant_9:the_worm_28,factor_key=TRUE)
head(chechen)
all_turkic_counts <- aggregate(all_turkic$Present, by=list(all_turkic$Speaker), FUN=sum, na.rm=TRUE, na.action=NULL)
head(all_turkic_counts)
colnames(all_turkic_counts) <- c("Speaker","Turkic_Loans")
all_turkic_counts <- left_join(all_turkic_counts, Districts, by= c("Speaker"))
all_turkic_counts$Village <- droplevels(all_turkic_counts$Village)
all_turkic_counts$District <- factor(all_turkic_counts$District, levels(all_turkic$District) <- c("Akhvakh", "Botlikh", "Rutul", "Tsunta"))
#all_turkic_counts <- all_turkic_counts[-c(1:6),]
all_turkic_counts$Turkic_Loans <- as.numeric(all_turkic_counts$Turkic_Loans)
p1 <- ggplot(data = all_turkic_counts, aes(x = factor(District, levels  = c("Rutul","Tsunta","Botlikh","Akhvakh")), y = Turkic_Loans)) +
geom_jitter(aes(color = all_turkic_counts$Village), position = position_jitter(width = 0.1, height = 0.1)) +
# levels = c("Dyubek","Tatil","Khapil","Yagdyg","Khiv","Laka","Khoredzh","Kiche","Rutul","Kina","Ikhrek", "Helmets", "Mikik")
stat_summary(fun.y = "median", geom = "point", pch = "_", size = 15)+
labs(title = "Turkic Influence", x = "District", y = "Number of Loanwords")+
theme_bw()+
theme(legend.position = "none")
avar_counts <- aggregate(avar$Present, by=list(avar$Speaker), FUN=sum, na.rm=TRUE, na.action=NULL)
head(avar_counts)
colnames(avar_counts) <- c("Speaker","Turkic_Loans")
avar_counts <- left_join(avar_counts, Districts, by= c("Speaker"))
avar_counts$Village <- droplevels(avar_counts$Village)
avar_counts$District <- factor(avar_counts$District, levels(avar$District) <- c("Akhvakh", "Botlikh", "Rutul", "Tsunta"))
#avar_counts <- avar_counts[-c(1:6),]
avar_counts$Turkic_Loans <- as.numeric(avar_counts$Turkic_Loans)
p2 <- ggplot(data = avar_counts, aes(x = factor(District, levels  = c("Rutul","Tsunta","Botlikh","Akhvakh")), y = Turkic_Loans)) +
geom_jitter(aes(color = avar_counts$Village), position = position_jitter(width = 0.1, height = 0.1)) +
# levels = c("Dyubek","Tatil","Khapil","Yagdyg","Khiv","Laka","Khoredzh","Kiche","Rutul","Kina","Ikhrek", "Helmets", "Mikik")
stat_summary(fun.y = "median", geom = "point", pch = "_", size = 15)+
labs(title = "Avar Influence", x = "District", y = "Number of Loanwords")+
theme_bw()+
theme(legend.position = "none")
georgian_counts <- aggregate(georgian$Present, by=list(georgian$Speaker), FUN=sum, na.rm=TRUE, na.action=NULL)
head(georgian_counts)
colnames(georgian_counts) <- c("Speaker","Turkic_Loans")
georgian_counts <- left_join(georgian_counts, Districts, by= c("Speaker"))
georgian_counts$Village <- droplevels(georgian_counts$Village)
georgian_counts$District <- factor(georgian_counts$District, levels(georgian$District) <- c("Akhvakh", "Botlikh", "Rutul", "Tsunta"))
#georgian_counts <- georgian_counts[-c(1:6),]
georgian_counts$Turkic_Loans <- as.numeric(georgian_counts$Turkic_Loans)
p3 <- ggplot(data = georgian_counts, aes(x = factor(District, levels  = c("Rutul","Tsunta","Botlikh","Akhvakh")), y = Turkic_Loans)) +
geom_jitter(aes(color = georgian_counts$Village), position = position_jitter(width = 0.1, height = 0.1)) +
# levels = c("Dyubek","Tatil","Khapil","Yagdyg","Khiv","Laka","Khoredzh","Kiche","Rutul","Kina","Ikhrek", "Helmets", "Mikik")
stat_summary(fun.y = "median", geom = "point", pch = "_", size = 15)+
labs(title = "Georgian Influence", x = "District", y = "Number of Loanwords")+
theme_bw()+
theme(legend.position = "none")
head(chechen_counts)
colnames(chechen_counts) <- c("Speaker","Turkic_Loans")
chechen_counts <- left_join(chechen_counts, Districts, by= c("Speaker"))
chechen_counts <- aggregate(chechen$Present, by=list(chechen$Speaker), FUN=sum, na.rm=TRUE, na.action=NULL)
head(chechen_counts)
colnames(chechen_counts) <- c("Speaker","Turkic_Loans")
chechen_counts <- left_join(chechen_counts, Districts, by= c("Speaker"))
chechen_counts$Village <- droplevels(chechen_counts$Village)
chechen_counts$District <- factor(chechen_counts$District, levels(chechen$District) <- c("Akhvakh", "Botlikh", "Rutul", "Tsunta"))
#chechen_counts <- chechen_counts[-c(1:6),]
chechen_counts$Turkic_Loans <- as.numeric(chechen_counts$Turkic_Loans)
p4 <- ggplot(data = chechen_counts, aes(x = factor(District, levels  = c("Rutul","Tsunta","Botlikh","Akhvakh")), y = Turkic_Loans)) +
geom_jitter(aes(color = chechen_counts$Village), position = position_jitter(width = 0.1, height = 0.1)) +
# levels = c("Dyubek","Tatil","Khapil","Yagdyg","Khiv","Laka","Khoredzh","Kiche","Rutul","Kina","Ikhrek", "Helmets", "Mikik")
stat_summary(fun.y = "median", geom = "point", pch = "_", size = 15)+
labs(title = "Chechen Influence", x = "District", y = "Number of Loanwords")+
theme_bw()+
theme(legend.position = "none")
par(mfcol=c(1,4))
grid.arrange(p1, p2, p3, p4, nrow = 1)
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow = 1)
