library(tidyverse)
color <- read_tsv("colortry.csv")
glot <- color[grep(color$Eng = "glot"),]
glot <- color[grep(color$Eng, "glot"),]
glot <- color[grep(color$Eng, "glot "),]
glot <- color[sub(color$Eng, "glot "),]
glot <- color[grep(color$Eng, "glot "),]
glot <- color[grep("glot "),]
glot <- read_tsv("color_glot.csv")
vill <- read_tsv("color_vill.csv")
map.feature(vill$Lang,
latitude = vill$Lat,
longitude = vill$Lon,
color = vill$Color)
map.feature(vill$Lang,
latitude = vill$Lat,
longitude = vill$Lon,
features = vill$Lang,
color = vill$Color)
map.feature(glot$Lang,
latitude = glot$Lat,
longitude = glot$Lon,
features = glot$Lang,
color = glot$Color)
View(glot)
glot <- read_tsv("color_glot.csv")
col <- read_tsv("col.csv")
View(col)
View(glot)
colnames(col)[4,] <- "Lang"
colnames(col)[,4] <- "Lang"
colnames(col)[1] <- "Lang"
glot_col <- merge(glot, col, by = 'Lang')
View(glot_col)
map.feature(glot_col$Lang,
latitude = glot_col$Lat,
longitude = glot_col$Lon,
features = glot_col$Lang,
color = glot_col$Color.y)
vill_col <- merge(vill, col, by = 'Lang')
map.feature(vill_col$Lang,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Lang,
color = vill_col$`Village color`)
map.feature(vill_col$Lang,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Lang,
color = vill_col$`Village color`) %>%
map.feature(glot_col$Lang,
latitude = glot_col$Lat,
longitude = glot_col$Lon,
features = glot_col$Lang,
color = glot_col$Color.y,
pipe.data = .)
library(lingtypology)
library(tidyverse)
glot <- read_tsv("color_glot.csv")
col <- read_tsv("col.csv")
glot_col <- merge(glot, col, by = 'Lang')
vill <- read_tsv("color_vill.csv")
vill_col <- merge(vill, col, by = 'Lang')
map.feature(vill_col$Lang,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Lang,
color = vill_col$`Village color`) %>%
map.feature(glot_col$Lang,
latitude = glot_col$Lat,
longitude = glot_col$Lon,
features = glot_col$Lang,
color = glot_col$Color.y,
pipe.data = .)
map.feature(vill_col$Lang,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Lang,
width = 3,
color = vill_col$`Village color`) %>%
map.feature(glot_col$Lang,
latitude = glot_col$Lat,
longitude = glot_col$Lon,
features = glot_col$Lang,
color = glot_col$Color.y,
pipe.data = .)
map.feature(vill_col$Lang,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Lang,
width = 10,
color = vill_col$`Village color`) %>%
map.feature(glot_col$Lang,
latitude = glot_col$Lat,
longitude = glot_col$Lon,
features = glot_col$Lang,
color = glot_col$Color.y,
pipe.data = .)
map.feature(vill_col$Lang,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Lang,
width = 8,
color = vill_col$`Village color`) %>%
map.feature(glot_col$Lang,
latitude = glot_col$Lat,
longitude = glot_col$Lon,
features = glot_col$Lang,
color = glot_col$Color.y,
pipe.data = .)
map.feature(vill_col$Lang,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Lang,
width = 8, opacity = 0.5,
color = vill_col$`Village color`) %>%
map.feature(glot_col$Lang,
latitude = glot_col$Lat,
longitude = glot_col$Lon,
features = glot_col$Lang,
color = glot_col$Color.y,
pipe.data = .)
map.feature(vill_col$Lang,
latitude = vill_col$Lat,
longitude = vill_col$Lon,
features = vill_col$Lang,
width = 8, opacity = 0.8,
color = vill_col$`Village color`) %>%
map.feature(glot_col$Lang,
latitude = glot_col$Lat,
longitude = glot_col$Lon,
features = glot_col$Lang,
color = glot_col$Color.y,
pipe.data = .)
map.feature(col$Lang,
features = col$Lang,
color = col$Color)
col <- read_tsv("col.csv")
map.feature(col$Lang,
features = col$Lang,
color = col$Color)
col$gltc <- gltc(col$Lang)
col$gltc <- gltc.lang(col$Lang)
View(col)
lang <- read_tsv("languages.csv")
lang <- lang[unique(lang$language),]
lang$gltc <- gltc.lang(lang$language)
View(lang)
lang <- read_tsv("languages.csv")
lang <- lang[!duplicated(lang$language),]
lang$gltc <- gltc.lang(lang$language)
View(lang)
write.csv(lang, "lang.csv")
knitr::opts_chunk$set(echo = FALSE)
# loading packages
library(tidyverse)
library(DT)
library(lingtypology)
# loading data - mind the date in the csv filename!
words <- read_tsv("words_07022019.csv")
meta <- read_tsv("meta_07022019.csv")
# select relevant parameters from metadata file
meta <- meta %>%
select(`List ID`, Type, Code, Language, Glottocode, Village, District, Lat, Lon)
# merge table with target words and the corresponding metadata
words_meta <- merge(words, meta, by = 'List ID')
# select some variables for the datatable (= database interface)
database <- words_meta %>%
select(`Concept nr.`, Concept, Word, Set, Village, Language, District, `List ID`)
View(words)
color <- words[(words$Concept == 'the colour/color'),]
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
View(color)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
feature = color$Set)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
color <- color[complete.case(color$Set),]
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
color <- color[complete.cases(color$Set),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
color <- database[(database$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
View(database)
knitr::opts_chunk$set(echo = FALSE)
# loading packages
library(tidyverse)
library(DT)
library(lingtypology)
# loading data - mind the date in the csv filename!
words <- read_tsv("words_07022019.csv")
meta <- read_tsv("meta_07022019.csv")
# select relevant parameters from metadata file
meta <- meta %>%
select(`List ID`, Type, Code, Language, Glottocode, Village, District, Lat, Lon)
# merge table with target words and the corresponding metadata
words_meta <- merge(words, meta, by = 'List ID')
# select some variables for the datatable (= database interface)
database <- words_meta %>%
select(`Concept nr.`, Concept, Word, Set, Village, Language, District, `List ID`)
content <- words_meta %>%
group_by(`List ID`, Language, Word) %>%
summarise(Words = n())
languages <- length(unique(content$Language))
target_words <- sum(content$Words)
all <- rbind(target_words, languages)
all
# Create a searchable datatable with filters on top
datatable(database, class = 'cell-border stripe', filter = 'top', options = list(pageLength = 100))
# Remove certain NA's for now
meta <- meta[complete.cases(meta$Lat),]
meta <- meta[complete.cases(meta$Glottocode),]
# Separate dictionaries from speakers
dict <- meta %>%
filter(meta$Type == 'Dictionary')
speakers <- meta %>%
filter(meta$Type == 'Speaker')
# Create a dataframe that shows the number of lists per village
lists <- speakers %>%
group_by(Village, Language, Glottocode, Lat, Lon) %>%
summarise(Lists = n())
# Convert the column with counts to a factor
lists$Lists <- as.factor(lists$Lists)
# Draw a map that shows each village and the number of lists collected
map.feature(lang.gltc(lists$Glottocode),
feature = lists$Lists,
color = "magma",
latitude = lists$Lat,
longitude = lists$Lon,
zoom.control = TRUE,
legend = TRUE,
title = "Lists",
label = lists$Language,
popup = paste(aff.lang(lang.gltc(lists$Glottocode)), # Popup with genetic info on language + name of village
"<br>",
"<br>",
"<b> Village: </b>",
lists$Village),
zoom.level = 7.5) %>% # Put another map on top of it, showing dictionary data
map.feature(lang.gltc(dict$Glottocode),
latitude = dict$Lat,
longitude = dict$Lon,
feature = dict$Language,
label = dict$Language,
popup = paste(aff.lang(lang.gltc(dict$Glottocode)),
"<br>",
"<br>",
"<b>Source:</b>",
"[Insert reference to literature here]"),
legend = FALSE,
color = c("orange"),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
color <- database[(database$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
color <- database[(database$Concept == 'the colour/color'),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
color <- database[(database$Concept == 'the colour/color'),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
View(words_meta)
View(words)
View(words_meta)
View(database)
# loading packages
library(tidyverse)
library(DT)
library(lingtypology)
# loading data - mind the date in the csv filename!
words <- read_tsv("words_07022019.csv")
meta <- read_tsv("meta_07022019.csv")
# select relevant parameters from metadata file
meta <- meta %>%
select(`List ID`, Type, Code, Language, Glottocode, Village, District, Lat, Lon)
# merge table with target words and the corresponding metadata
words_meta <- merge(words, meta, by = 'List ID')
words_meta$Set <- paste(words_meta$`Concept nr.`, "-", words_meta$Stem)
# select some variables for the datatable (= database interface)
database <- words_meta %>%
select(`Concept nr.`, Concept, Word, Set, Village, Language, District, `List ID`)
View(words_meta)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
popup = color$Word)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
popup = color$Word,
zoom.control = T,
zoom.level = 7)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Lat),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Word),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
library(lingtypology)
glot <- c("west2369", "kumy1244", "russ1263", "arch1244", "bezh1248", "egyp1253", "nort2697",
"nucl1302")
lat <- lat.gltc(glot)
lat <- lat.lang(lang.gltc(glot))
lon <- lon.lang(lang.gltc(glot))
lon <- long.lang(lang.gltc(glot))
coord <- data.frame(cbind(lat, lon))
View(coord)
knitr::opts_chunk$set(echo = FALSE)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Word),]
map.feature(color$Language,
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Word),]
color <- color[complete.cases(color$Glottocode),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
knitr::opts_chunk$set(echo = FALSE)
# loading packages
library(tidyverse)
library(DT)
library(lingtypology)
# loading data - mind the date in the csv filename!
words <- read_tsv("words_07022019.csv")
meta <- read_tsv("meta_07022019.csv")
# select relevant parameters from metadata file
meta <- meta %>%
select(`List ID`, Type, Code, Language, Glottocode, Village, District, Lat, Lon)
# merge table with target words and the corresponding metadata
words_meta <- merge(words, meta, by = 'List ID')
words_meta$Set <- paste(words_meta$`Concept nr.`, "-", words_meta$Stem)
# select some variables for the datatable (= database interface)
database <- words_meta %>%
select(`Concept nr.`, Concept, Word, Set, Village, Language, District, `List ID`)
View(color)
knitr::opts_chunk$set(echo = FALSE)
# loading packages
library(tidyverse)
library(DT)
library(lingtypology)
# loading data - mind the date in the csv filename!
words <- read_tsv("words_07022019.csv")
meta <- read_tsv("meta_07022019.csv")
# select relevant parameters from metadata file
meta <- meta %>%
select(`List ID`, Type, Code, Language, Glottocode, Village, District, Lat, Lon)
# merge table with target words and the corresponding metadata
words_meta <- merge(words, meta, by = 'List ID')
words_meta$Set <- paste(words_meta$`Concept nr.`, "-", words_meta$Stem)
# select some variables for the datatable (= database interface)
database <- words_meta %>%
select(`Concept nr.`, Concept, Word, Set, Village, Language, District, `List ID`)
content <- words_meta %>%
group_by(`List ID`, Language, Word) %>%
summarise(Words = n())
languages <- length(unique(content$Language))
target_words <- sum(content$Words)
all <- rbind(target_words, languages)
all
# Remove certain NA's for now
meta <- meta[complete.cases(meta$Glottocode),]
# Separate dictionaries from speakers
dict <- meta %>%
filter(meta$Type == 'Dictionary')
speakers <- meta %>%
filter(meta$Type == 'Speaker')
# Create a dataframe that shows the number of lists per village
lists <- speakers %>%
group_by(Village, Language, Glottocode, Lat, Lon) %>%
summarise(Lists = n())
# Convert the column with counts to a factor
lists$Lists <- as.factor(lists$Lists)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Word),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
View(color)
color <- words_meta[(words_meta$Concept == 'the colour/color'),]
color <- color[complete.cases(color$Word),]
color <- color[complete.cases(color$Glottocode),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
# Draw a map that shows each village and the number of lists collected
map.feature(lang.gltc(lists$Glottocode),
feature = lists$Lists,
color = "magma",
latitude = lists$Lat,
longitude = lists$Lon,
zoom.control = TRUE,
legend = TRUE,
title = "Lists",
width = 7,
label = lists$Language,
popup = paste(aff.lang(lang.gltc(lists$Glottocode)), # Popup with genetic info on language + name of village
"<br>",
"<br>",
"<b> Village: </b>",
lists$Village),
zoom.level = 7.5) %>% # Put another map on top of it, showing dictionary data
map.feature(lang.gltc(dict$Glottocode),
latitude = dict$Lat,
longitude = dict$Lon,
feature = dict$Language,
label = dict$Language,
popup = paste(aff.lang(lang.gltc(dict$Glottocode)),
"<br>",
"<br>",
"<b>Source:</b>",
"[Insert reference to literature here]"),
legend = FALSE,
color = c("orange"),
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
color <- words_meta[(words_meta$Concept == 'the bucket'),]
color <- color[complete.cases(color$Word),]
color <- color[complete.cases(color$Glottocode),]
map.feature(lang.gltc(color$Glottocode),
latitude = color$Lat,
longitude = color$Lon,
features = color$Set,
zoom.control = T,
zoom.level = 7)
bucket <- words_meta[(words_meta$Concept == 'the bucket'),]
bucket <- bucket[complete.cases(bucket$Word),]
bucket <- bucket[complete.cases(bucket$Glottocode),]
map.feature(lang.gltc(bucket$Glottocode),
latitude = bucket$Lat,
longitude = bucket$Lon,
features = bucket$Set,
zoom.control = T,
zoom.level = 7,
label = bucket$Language,
popup = bucket$Word)
rm(list=ls())
setwd("~/Git/Dagloan_database")
words <- read_tsv("words_07022019.csv")
library(tidyverse)
words <- read_tsv("words_07022019.csv")
words$Set <- paste(words$`Concept nr.`, "-", words$Stem)
a <- unique(words$Set)
